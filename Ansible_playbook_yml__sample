PLAYBOOK INTRO
==============
> Playbook is a single YAML file, containing one or more â€˜playsâ€™ in a list.

-> Plays are ordered sets of tasks to execute against host servers from your inventory file.

-> Play defines a set of activities (tasks) to be run on hosts.

-> Task is an action to be perform on the host

Examples are 

 a) Execute a command
 b) Run a shell script
 c) Install a package
 d) Shutdown/Restart the hosts


Note : Playbooks start with the YAML three dashes (---) and end with â€¦

-> Each play has first hosts, variables, and tasks


FileName: pingServers.yml
---------------------------------------
---
- hosts: all
  gather_facts: no
  remote_user: anisble
  tasks:
   - name : Test connection
     ping:
     remote_user: ansible


#hosts: The tasks will be executing in specified group of servers.

#name: which is the task name that will appear in your terminal when you run the playbook. 

#remote_user: This parameter was formerly called just user. It was renamed in Ansible 1.4 to make it more distinguishable from the user module (used to create users on remote systems).

Note : Remote users can also be defined per task.


# Run the playbook Using below command

$ ansible-playbook <<Playbbok file name>>

# It will run the samplePlayBook.yml playbook in verbose

$ ansible-playbook samplePlayBook.yml -v
$ ansible-playbook samplePlayBook.yml -vv
$ ansible-playbook samplePlayBook.yml -vvv

$ It will provide help on ansible_playbook command
$ ansible-playbook --help

#  It will check the syntax of a playbook
$ ansible-playbook playbook.yml --syntax-check

# It will do in dry run.
$ ansible-playbook playbook.yml --check

# It will display the which hosts would be effected by a playbook before run
$ ansible-playbook playbook.yml --list-hosts

# It execute one-step-at-a-time, confirm each task before running with (N)o/(y)es/(c)ontinue
$ ansible-playbook playbook.yml --step








+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=======================================================================================
PLAYBOOK SAMPLES
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
======================================================================================


# Write a playbook to ping all
---
- hosts: all
  tasks:
    -name: ping all host nodes
    ping:
    remote_user: ans


# write a playbook to create a file in all host nodes

- hosts: all
  tasks:
    - name: create a file in all host nodes
      file:
        path: /home/ans/Hello22.txt
        state: touch

#write a playbook to copy content into a file

- hosts: all
  tasks:
    - name: copy content into a file
      copy: content="hello World!" dest=/home/ans/Hello22.txt

# Write a playbook to install and start httpd/apache2 in all host nodes
- hosts: all
  become: true
  tasks:
    - name: install apache2 package
      apt:
        name: apache2
        state: latest
    - name: start apache2 server
      service:
        name: apache2
        state: started

# Write a playbook to install hhtpd/apache2, copy index.html and start in all host nodes
- hosts: all 
  tasks:
    - name: install apache2 package
      apt:
        name: apache2
        state: latest
    - name: copy index.html file
      copy: 
        src: index.html
        dest: /var/www/html/index.html
      become: true
    - name: start apache2 service
      service:  
        name: apache2
        state: started
---



                                                               ====================================================
                                                               ====================================================
                                                                            VARIABLES in PLAYBOOK
                                                               ====================================================
                                                               ====================================================


=======================================================
ANSIBLE PLAYBOOK variable declared through COMMAND LINE
=======================================================



- hosts: all
  become: true
  tasks:
    - name: install apache2 package
      apt:
        name: "{{package_name}}"
        state: latest
    - name: copy index.html file
      copy:
        src: index.html
        dest: /var/www/html/index.html
    - name: start apache2 service
      service:
        name: "{{package_name}}"
        state: started

syntax--
=======
$ ansible-playbook hostSITE.yml --extra-vars package_name=apache2





=========================================================
ANSIBLE PLAYBOOK variable declared through PLAYBOOK itself
==========================================================


- hosts: all
  become: true
  vars:
    package_name: apache2
  tasks:
    - name: install apache2 package
      apt:
        name: "{{package_name}}"
        state: latest
    - name: copy index.html file
      copy:
        src: index.html
        dest: /var/www/html/index.html
    - name: start apache2 service
      service:
        name: "{{package_name}}"
        state: started



NOTE---- If we are declaring the variable in the playbook itself then we can run it as the default command
         which is------ $ ansible-playbook hostSITE.yml







==============
Group Variables
==============




-> For webservers i want to install git-2.1

-> For dbservers i want to install git-2.3

-> We can achieve this using group variables

-> group vars files should be created at host inventory location 

-> host-inventory location : /etc/ansible

group_vars/all.yml
group_vars/<groupName>.yml

Ex: group_vars/webservers.yml
      group_vars/dbservers.yml
      group_vars/all.yml

-> /etc/ansible/group_vars/all.yml

-> create mkdir /etc/ansible/group_vars

-> vi /etc/ansible/group_vars/all.yml
test: abc

-> vi /etc/ansible/group_vars/appservers.yml
test: xyz


Note: as we have group vars file for appservers it will consider xyz for appservers group and for remaining servers group it will take all.yml file value





=========
Host vars
=========





-> server specific variables

-> In one group we will have multiple servers 

-> For every host if we wan seperate variables then we should go for host vars

-> mkdir /etc/ansible/host_vars

-> create a file with host name or ip 

-> vi /etc/ansible/host_vars/172.138.1.1.yml









============
============
Ansible Vault
=============
=============



ansible-vault create <filename>.yml
ansible-vault encrypt <filename>.yml
ansible-vault view <filename>.yml
ansible-vault edit <filename>.yml
ansible-vault decrypt <filename>.yml
ansible-vault rekey <filename>.yml


-> To encrypt a playbook we need to set one vault password

-> while executing playbook we need to pass vault password

$ ansible-playbook <filename>.yml --ask-vault-pass

-> You can store vault password in a file and you can give that file as input to execute playbook

$ vi valutpass
$ ansible-playbook filename.yml --vault-password-file=~/vaultpass

# We can see encrypted file in human readable format
$ ansible-vault view /etc/ansible/group_vars/all.yml

# We can edit encrypted file in human readable format
$ ansible-vault edit /etc/ansible/group_vars/all.yml

# We can decrypt the file
$ ansible-vault edit /etc/ansible/group_vars/all.yml

# To update vault password we can use rekey
$ ansible-vault rekey /etc/ansible/group_vars/all.yml






============
============
HANDLERS
============
============


- hosts: all
  become: true
  vars:
    package_name: apache2
  tasks:
    - name: install "{{package_name}}" package
      apt:
        name: "{{package_name}}"
        state: latest
    - name: copy index.html file
      copy:
        src: index.html
        dest: /var/www/html/index.html
      notify:
        - start apache2 service
  handlers:
    - name: start apache2 service
      service:
        name: "{{package_name}}"
        state: started

